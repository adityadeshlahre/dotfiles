# figlet -f avatar lf
#  _     _____
# / \   /    /
# | |   |  __\
# | |_/\| |
# \____/\_/
#
# Official Document: https://pkg.go.dev/github.com/gokcehan/lf
# Example config: https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

# Like vim settings, put no in front ot the arrtibute to negate
set nodrawbox
set hidden
set icons
set ignorecase
set incsearch
set nomouse
set number
set preview
set relativenumber
set smartcase

# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the ui
# !  shell-wait      shell command waiting for key press
# &  shell-async     shell command running asynchronously

# Archive commands
cmd unarchive ${{
  set -f
  case "$f" in
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
      *.tar.gz|*.tgz) tar xzvf $f;;
      *.tar.xz|*.txz) tar xJvf $f;;
      *.zip) unzip $f;;
      *.rar) unrar x $f;;
      *.7z) 7z x $f;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Reference for default bindings and removal of some - by binding to nothing

# Some commonly used default bindings:
# q -> quit
# hjkl, gg, G -> navigation
# v -> invert
# u -> unselect
# y -> copy
# d -> cut
# p -> paste
# c -> clear (selection)
# r -> rename
# f -> find
# /, n, N -> search and next/prev
# w shell
# z<suffix> -> set info
# s<suffix> -> set sort

map gs !git status


cmd choose_editor ${{
  printf ' Editor to open the file with: '
  read ans
  $ans "$f"
}}
# unbind by setting it to nothing
map e # map e $$EDITOR "$f"
map ec choose_editor
map ee $$EDITOR "$f"


# mark-save      (modal)   (default 'm')
map m
# mark-load      (modal)   (default "'")
map ' 
# mark-remove    (modal)   (default '"')
map "
map ml mark-load
map mr mark-remove
map ms mark-save


# $: Since we do not want to open $EDITOR in the small LF command line
cmd mkfile ${{
  if [ -z $1 ]; then
    printf ' File Name: '
    read ans
    $EDITOR $ans
  else
    $EDITOR $1
  fi
}}
map mf mkfile
map md :push %mkdir<space>


cmd chmod %{{
  printf ' Mode Bits: '
  read ans

  for file in $fx; do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}
map mo chmod


cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}
map f # find           (modal)   (default 'f')
map F # find-back      (modal)   (default 'F')
map ; # find-next                (default ';')
map , # find-prev                (default ',')
map ff fzf_jump

# Automatically create trash folder upon the startup
${{ if [ ! -d ~/.theoshell/trash ]; then mkdir -p ~/.theoshell/trash; fi }}
# $f = current cursor, $fs = selected files, $fx = ($fs exists) ? ($fs) : ($f)
cmd trash !{{ IFS="$(printf '\n\t')"; mv $fx ~/.theoshell/trash && printf ":) $fx moved to trash!\n" || printf ":( Failed to move $fx to trash\n" }}
map DD trash

# Remove command for bypassing trash
cmd rm ${{
  set -f
  printf "$fx\n"
  printf "delete?[y/n]"
  read ans
  [ "$ans" = "y" ] && rm -rf $fx
}}

