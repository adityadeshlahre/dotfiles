*theovim.txt*             Theo's Neovim Configuration
*theovim*

                                \/       \/          ~
                                /\_______/\          ~
                               /   o   o   \         ~
                              (  ==  ^  ==  )        ~
                               )           (         ~
                              (             )        ~
                              ( (  )   (  ) )        ~
                             (__(__)___(__)__)       ~
                            ___                      ~
                             | |_  _  _     o __     ~
                             | | |(/_(_)\_/ | |||    ~

==============================================================================

Welcome back Theo, what did you forget this time?

- Type |gO| to see the table of contents
- Use |K| (or |CTRL-]|) to jump to the tag under cursor, |CTRL-T| to comeback
- If you see a path to another file, use |gd| to open the file
- If you see a hyperlink, use |gx| to open it in your default browser
  - Try this out with Vim Cheat Sheet website:
    https://vim.rtorr.com/

==============================================================================
Housekeeping                                            *theovim-housekeeping*

- |:checkhealth| to see if you are missing any runtime files
- |:messages| to check previous error messages and notifications
- Run `:Lazy sync` to update plugins
  - This runs `:TSUpdate` at the same time
- Run `:MasonUpdate` to update LSP servers

See also:
- |pi_health.txt|: About Neovim's healthcheck framework

==============================================================================
Options                                                      *theovim-options*

If you need to see the currently set option, use >
  :lua =vim.bo.<opt>
>

Tab/Indentation:
By default,
- |'tabstop'| (how many char Vim renders <Tab> as) = 4
- |'softtabstop'| (how many char the cursor moves with <Tab> and <BS>) = 0
  - 0 disables 'softtabstop'
- |'extandtab'| (uses spaces instead of <Tab> when on) = true
  - To insert <Tab> with with 'expandtab' on, use |i_CTRL-v| followed by <Tab>
  - To change the type of indentations in an existing file, use |:retab|
- |'shiftwidth'| (number of spaces used for indentation) = 2
- Read the below section for how <Tab> and indentation spaces are rendered

For certain filetypes, indentation settings are handled by |ftplugin|.
See |theovim-ftplugins| for more information.

See also:
- |'tabstop'| documentation outlines four main ways to configure tab in Vim.
  Theovim uses the number 2. Tab lovers will like number 1.


Character rendering:
>
  function example()
  ┊ ┊ str = "A line indented with four spaces"
  ⇥   str = "A line followed by <Tab> ('tabstop=4')"

  ┊ str = "A line followed by two trailing whitespaces"␣␣

  ┊ str = "Pretend that this line is really really really long and is wrap
    ↪ ped. Notice how a wrapped line is also indented (`:h showbreak`)"

  ┊ str = "If you don't have 'showbreak' enabled, wrapped lines would look
  ↪ like this"
  end
<
Note that |lcs-leadmultispace| (indentation guide for space-base indentations)
change dynamically based on |'shiftwidth'| value.
See |theovim-core-autocmds| for more information.


Fold:
Set to treesitter fold.

char            action
----------------------------------------------------------------------

|za|            Toggle one fold
|zA|            Toggle all folds under the cursor recursively
|zo|            Open one fold
|zO|            Open all folds under the cursor recursively
|zc|            Close one fold
|zC|            Close all folds under the cursor recursively

|zM|            Close all folds
|zR|            Open all folds

|zx|            Update fold. Given the nature of fold as an experimental
              treesitter feature, fold might work unexpectedly. Use this
              keybinding to fix any issue

See also:
- |folding|
- |nvim_treesitter#foldexpr()|

==============================================================================
Spell Check                                                    *theovim-spell*

Spell check is enabled for some buffers using |theovim-ftplugins|.
`:set spell!` toggles spell check manually.

char            action
----------------------------------------------------------------------

|]s|            Move to the next misspelled words
|[s|            Move to the previous misspelled words

|zg|            Add the current word to the first file in |spellfile|

|z=|            Find the suggestions for the word under the cursor

There also is a custom keybinding `<C-s>` that fixes the nearest spelling
error in insert mode.

When you use |zg| to add a word, the word is appended to `spell/en.utf-8.add`,
and the corresponding `.spl` binary is compiled.
`.spl` file is in `.gitignore` for my Dotfiles, so if you would like to
compile it manually, use: >
  :mkspell ~/.config/nvim/spell/en.utf-8.add
<

See also:
- |spell|
- |spellfile|
- |spellfile-cleanup|
- |:mkspell|
- |internal-wordlist|

==============================================================================
Commenting                                                *theovim-commenting*

Neovim offers built-int |commenting| plugin in 0.10.
The value is controlled by |'commentstring'|, which often treesitter sets.
See |gc-default| for more information.

==============================================================================
Keymaps                                                      *theovim-keymaps*

Default overrides:

char            action
----------------------------------------------------------------------

<ESC>           (normal mode) Clears search highlight (|nohlsearch|).

<ESC><ESC>      (terminal mode) Exits the terminal insert mode.
                See |CTRL-\_CTRL-N|.

j               If the line at the cursor is not wrapped, perform |j|.
                If the line is wrapped, perform |gj|.
k               If the line at the cursor is not wrapped, perform |k|.
                If the line is wrapped, perform |gk|.

n               Highlight the next search result (|n|) and center the
                screen (|zz|).
N               Highlight the prev search result (|N|) and center the
                screen (|zz|).

<C-u>           Scroll up by half a page (|CTRL-U|, or by the value
                of |scroll|) and center the screen (|zz|).
<C-d>           Scroll down by half a page (|CTRL-U|, or by the value
                of |scroll|) and center the screen (|zz|).

                For the following window adjustment keybindings,
                you have to be quite rapid about the repeating keys
                due to the default |'timeoutlen'|.

Custom:

char            action
----------------------------------------------------------------------

jk              (insert mode) ESC.
<C-s>           (insert mode) Fix the nearest spelling error and put
                the cursor back.

<leader>a       Select all.
<leader>y       (visual mode) Copy to the system clipboard
                (|quoteplus|).
<leader>p       (visual mode) Paste the current selection without
                overriding the register.
                For example, if you have TODO: Finish the example

[b              Navigate to the previous buffer (|bprev|).
]b              Navigate to the next buffer (|bnext|).
<leader>k       List open buffers (|ls|) and fill the command line
                with |:bdelete| followed by `<Space>`.
                From there, you can type a buffer number to create
                to a buffer.
                For example, `<leader>k` followed by `69<CR>` will
                kill buffer 69.
                Type `<CR>` without a number to kill the curr buf.

<leader>tt      Toggle a floating terminal (the terminal state persists)
<leader>tb      Launch a terminal in the bottom
<leader>tr      Launch a terminal to the right
                See |:terminal| to learn more about Neovim terminal.
                See |:lefta|, |:rightb|, |:topleft|, and |:bo| to
                learn more about opening a window.

<C-h>           If there is a window to the left: navigate to the window
                Else: Create a window to the left and navigate to it
<C-j>           If there is a window below: navigate to the window
                Else: Create a window below and navigate to it
<C-k>           If there is a window above: navigate to the window
                Else: Create a window above and navigate to it
<C-k>           If there is a window to the right: navigate to the window
                Else: Create a window to the right and navigate to it

==============================================================================
Commands                                                    *theovim-commands*

- `:TrimWhitespace`: Trim trailing whitespaces. It will prompts you with
  confirmations for each whitespace.
- `:CD`: Change the local directory to the parent directory of the current
  file. For example, when the current directory is `nvim` and you open
  `doc/theovim.txt`, invoke the command to change the directory to `doc`.
  This is useful when narrowing down the scope of a Telescope search.

==============================================================================
autocmds                                                    *theovim-autocmds*

Organized based on |autocmd-groups|.
- `YankHighlight`: Highlight the yanked text. See |TextYankPost|
- `SpellCheck`: Spell check is turned on in Markdown, TeX, and text filetypes
- `Terminal`: When you open or navigate to a terminal buffer, automatically
  starts the insert mode
- `UpdateLeadmultispace`: Update |lcs-leadmultispace| value (i.e., indentation
  guide) based on the |'shiftwidth'| value. It is triggered when you manually
  change the |'shiftwidth'| value or enter the buffer for the first time.

>
    ... A buffer with shiftwidth set to 2
    ┊ ┊ str = "A line indented with 4 spaces"
    ...
    ... `:set shiftwidth 4`
    ...
    ┊   str = "A line indented with 4 spaces"
<
  |autocmd-once| is used to make sure that the indentation guide is consistent
  with indentation settings set by |ftplugin|.

==============================================================================
ftplugins                                                  *theovim-ftplugins*

Built-in Neovim ftplugins are located in `$VIMRUNTIME/ftplugin/`.
To copy your |$VIMRUNTIME| to your system clipboard (|quoteplus|), use
|:redir| command: `:redir @+> | echo $VIMRUNTIME | redir END`

Alternatively, Neovim supports |editorconfig| out of the box. These are
projet-specific coding style files.
They will override `ftplugin` or other Vim settings.

See also:
- |write-filetype-plugin|

==============================================================================
UI Components                                                     *theovim-ui*

UI components are located in the `lua/ui` directory.

See also:
- |setting-tabline|: Guide on configuring Tabline
- |'statusline'|: Information about Vim Statusline and built-in items
- |'winbar'|: Neovim window bar, currently not in use

==============================================================================
Oil.nvim                                                         *theovim-oil*

- `:Oil` to open Oil in the current working directory
- Use - to navigate to the parent directory (and <CR> to `cd` into a dir)
- Rename, delete, or create files by modifying the buffer texts
- To create a directory, append "/" in the end of the name (e.g: "new_dir/")
- You can also copy or move files with |yy| and |dd|
  - Creating split windows can be helpful
- `:w` prompts for your confirmation of the changes you made

==============================================================================
gitsigns.nvim                                               *theovim-gitsigns*

|gitsigns.nvim| provides Git signs in the gutter (+, -, ~, etc.) as well as
other useful Git functionalities.
The following keybinding is enabled for Git buffers:

char            action
----------------------------------------------------------------------

<leader>gd      [G]it [D]iff current buffer.
                Calls |gitsigns.diffthis()|.

|tokyonight.nvim| is the default theme for Theovim.
Transparency is enabled for all elements, including sidebars and floats.
toggle transparency, locate `is_transparnt` variable in the `config`
function and set it to false.

==============================================================================
Vimtex                                                        *theovim-vimtex*

- You need to install and configure PDF viewer first.
  - In Linux, use Zathura (https://pwmt.org/projects/zathura/)
  - In macOS, use Skim (https://skim-app.sourceforge.io/)
  - Change the `vim.g.vimtex_view_method` in the plugins.lua
- `:VimtexCompile` starts a real-time compilation process

==============================================================================
nvim-org-mode                                          *theovim-nvim-org-mode*

char            action
----------------------------------------------------------------------

g?              Opens the built-in keymap help pop-up

<leader>oa      Opens Org-agenda
r               Refreshes Org-agenda
]               Moves to the later week
[               Moves to the earlier week

<leader>oc      Opens Org-capture
<C-c><C-c>      Finalizes the capture
<C-c><C-k>      Aborts the capture

<C-c>,          Sets the priority of the headline
<S-RIGHT>       Cycles the TODO keywords forward
<S-LEFT>        Cycles the TODO keywords backward
<C-CR>          Inserts a new TODO headline, respecting the previous contents
<C-c><C-d>      Inserts a deadline
<C-c><C-s>      Inserts a schedule date

See also:
- |orgmode.txt|

==============================================================================
LSP                                                              *theovim-lsp*

Step 1: Installing the language server

You need to have a language server available in your `$PATH`.
You can use a package manager of your operating system or |mason.nvim|.
Mason installs the the LSP server in data directory (` echo stdpath("data")`)
and makes it available to Neovim's `PATH`.
- |:Mason| to launch the graphical Mason UI
- |:MasonInstall| {server} to install packages


Step 2: Adding configuration for the language server

Neovim configures LSP servers with configuration tables from:
1. Parameters of |vim.lsp.config()|
2. Merged tables returned from `lsp/<name>.lua`
For more information, see |lsp-config|.

After you installed the language server, create a new config file.
Besides the example comments in `lua/theovim/lsp.lua`, all my config files are
located in `lsp/`.
Good references can be found in nvim-lspconfig repository:
https://github.com/neovim/nvim-lspconfig/tree/master/lua/lspconfig/configs

In `lua/theovim/lsp.lua`, add the name of the config file you created to the
`servers` table to be passed to |vim.lsp.enable()|
The config file could be named to anything as long as you match the name in
this table.

Now, open a buffer of the filetype you specified in the config and run: >vim
    :checkhealth vim.lsp
<
to see if it is attached to the buffer.

See also:
- |lsp-quickstart|: Guide on configuring LSP servers


Step 3: Using LSP

Starting in 0.10 and 0,11, Neovim ships with a lot of default keybindings
for the built-in diagnostic and LSP framework.

Diagnostics:
- |]d-default|
- |[d-default|
- |CTRL-W_d-default|
- |default-mappings| for more default diagnostic mappings

LSP:
- |K-lsp-default|
- `grn`: |vim.lsp.buf.rename()|
- `gra`: |vim.lsp.buf.code_action()|
- `grr`: |vim.lsp.buf.references()|
- `gO`: |vim.lsp.buf.document_symbols()|
- |gr-defaults| for more `gr` bindings for LSP
- |lsp-defaults| for more default LSP mappings and settings

These keybindings are overriden if conditions are met.

char            action
----------------------------------------------------------------------

K               Calls |vim.lsp.buf.hover()| with rounded borders.
gra             Calls |fzf-lua-opts-lsp_code_actions|.
grr             Calls |fzf-lua-opts-lsp_references|.
gri             Calls |fzf-lua-opts-lsp_implementations|.
gO              Calls |fzf-lua-opts-lsp_document_symbols|.


Other keymaps and commands are controlled with |lsp-attach| autocmd.

Autocmd:
- Symbol under the cursor (i.e., variables, functions, etc.) are highlighted.

Keybindings:

char            action
----------------------------------------------------------------------

<leader>q       Opens diagnostic list in |location-list|.
                Calls |vim.diagnostic.setloclist()|.

<leader>f       Calls |vim.lsp.buf.format()|

<leader>sd      Calls |fzf-lua-opts-diagnostics_document|


==============================================================================
Neocodeium                                                *theovim-neocodeium*

Run `:Neocodeium auth` and provide the API key to complete the initial setup.
Neocodeium will install the language server binary and other files in:
`vim.env.HOME .. "/.codeium"`.

char            action
----------------------------------------------------------------------

<leader>c       Toggle Neocodeium completion.
                When turning off, this keybinding completely halts
                the Codeium server.
                To toggle only the completion on/off, use
                `:Neocodeium toggle`.

<C-e>           Tries to show a suggestion if none is visible.
                Otherwise, cycle through the suggestions.
                The status of the suggestion will be indicated in
                the |signcolumn|
                ('*' for loading, '1/n' for 1 out of n suggestions).
<C-r>           `<C-e>` but cycles backwards.
<C-f>           Accepts the current suggestion

Neocodeium creates a autocmd to send abort signal to |nvim-cmp| if a Codeium
completion is displayed.
As a double-safeguard, `<C-e>` in nvim-cmp is mapped to abort the completion
window.
Thus, using `<C-e>` to toggle a suggestion when nvim-cmp window is open will
safely close the nvim-cmp window first before Neocodeium kicks in.

See also:
- |Neocodeium|

==============================================================================
fzf-lua                                                      *theovim-fzf-lua*

fzf-lua works out of the box, but for faster search and live grep features,
the following dependencies are needed:
- fzf
- fd
- ripgrep

char            action
----------------------------------------------------------------------

<leader>sf      [S]earch [F]iles

<leader>s.      [S]earch the Parent Dir [..]

<leader>so      [S]earch [O]ldfiles

<leader><leader>Search open buffers

<leader>sg      [S]earch by [G]rep.
                Searches words in the CWD.
                `ripgrep` is required for the search.

<leader>/       Open fuzzy finder for the current buffer words.


<leader>gc      Search [G]it [C]ommits.
                Calls |telescope.builtin.git_commits()|.

<leader>gs      Search [G]it [S]tatus.
                Calls |telescope.builtin.git_status()|.


Within the Telescope window, the following keybindings are available:

char            action
----------------------------------------------------------------------

<S-DOWN>        Scrolls preview page down
<S-UP>          Scrolls preview page up

<C-j>           Selects the next item
<C-n>           Selects the next item

<C-k>           Selects the prev item
<C-p>           Selects the prev item

<C-c>           Closes the window

<CR>            Opens the selection in the current window
<C-v>           Opens the selection in a vertical split
<C-s>           Opens the selection in a horizontal split
<C-t>           Opens the selection in a new tab



















----

Below are old documentation



==============================================================================
Treesitter                                                *theovim-treesitter*

Theovim installs the following TS servers out of the box:

- Bash
- C
- C++
- LaTeX
- Lua
- Python

In these filetypes, TS highlight (|nvim-treesitter-highlight-mod|), incremental
selection (|nvim-treesitter-incremental-selection-mod|), and indentation
(|nvim-treesitter-indentation-mod|) will be enabled.

To disable TS or add other parsers, use the following frequently used commands
provided by the nvim-treesitter plugin:

- :TSInstall {language} ...
- :TSUpdate {language} ...
- :TSDisable {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|
- :TSToggle {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|

The following keybindings are provided when a TS parser is enabled:

char            action
----------------------------------------------------------------------

<C-space>       Start incremental selection
<C-space>       (in visual mode) Perform node incremental selection
<C-s>           (in visual mode) Perform scope incremental selection
<M-space>       (in visual mode) Perform node decremental selection

Incremental selection example:

>
  local function treesitter-incremental-example()
    local sysname = vim.loop.os_uname().sysname
    if sysname == "Linux" then
      vim.notify("You are using Linux!")
    else
      vim.notify("Ew")
    end
  end
<

- When you start node incremental selection at the "vim" keyword (<C-space>),
  it will incrementally select:
  - "vim" -> "vim.notify" -> "vim.notify(...)" -> if statement
    -> function body -> function
- When you start scope incremental selection at the "vim" keyword
  (<C-space> to initialize then <C-s>), it will incrementally select:
  - "vim" -> if statement -> function
- You should try it out with the language of your choice to see how it behaves

See also:
- |nvim-treesitter|: Configuration and abstract layer for the built-in TS
- |treesitter|: Neovim built-in treesitter library

==============================================================================
Completion                                                *theovim-completion*

Auto-completion is available in any buffer, and they work like any other
modern IDEs.

Available sources when an LSP server is active and snippets are provided:
- |nvim-nvim-lsp|: Keywords and variables from the LSP
- |luasnip.txt|: Snippet engine for code templates
  - |friendly-snippets-friendly-snippets| provides the snippets themselves

Available sources for all buffers:
- |cmp-buffer|: Words in the buffer
- |cmp-path|: Filesystem paths (your terminal emulator must have permission to
  your files)
- |cmp-cmdline|: Completion for Vim commands (`:`) and search (`/`, `?`).

When `nvim-lsp` and/or `luasnip` sources are available, you will not see
`cmp-buffer` and `cmp-path` items. To disable this, combine two tables in
the `sources` attribute in the |cmp.setup()| function together.
See:
- |cmp-config.sources|
- |cmp-config.sources[n].group_index|

char            action
----------------------------------------------------------------------

<C-n>           Select the next item
<C-j>           Select the next item
                |cmp.mapping.select_next_item|
<C-p>           Select the prev item
<C-k>           Select the prev item
                |cmp.mapping.select_prev_item|

<C-e>           Close the completion menu
                |cmp.mapping.abort()|

<C-Space>       Open the completion menu if it is not already open

<C-y>           Confirm the selection.
<CR>            Confirm the selection.
                - `select = false`: If nothing is selected, close the
                  completion menu. Set true to choose the first item
                - `behavior = cmp.ConfirmBehavior.Replace`: controls
                  the behavior when completion is done adjacent to an
                  existing word. For example ("|" is the cursor):

>
                    |uire
                    ╭─────────────────────────────────╮
                    │ require(modname)  Function [LSP]│
                    │ req~           Snippet [LuaSnip]│

                    ... confirming the first item ...

                    require|
<

                  If `behavior = cmp.confirmBehavior.Insert`, it
                  would insert "requireuire"
                See |cmp.confirm|.

<C-l>           Moves to the next available expansion.
<C-h>           Moves to the previously available expansion.

<Tab>           - When the completion menu is open:
                  select the next item
                - After selecting an expandable LuaSnip snippet
                  (e.g., function with multiple parameters):
                  jump to the next snippet items
                - Else:
                  sends <Tab> (i.e., inserts <Tab>)

<S-Tab>         - When the completion menu is open:
                  select the prev item
                - After selecting an expandable LuaSnip snippet
                  (e.g., function with multiple parameters):
                  jump to the prev snippet items
                - Else:
                  sends <S-Tab>


See also:
- |nvim-cmp|: Completion plugin for LSP and snippet integration
- |cmp-cmdline-setup|: How to set the command line and search completion
- |ins-completion|: Default Vim completion library


==============================================================================
Documentation                                          *theovim-documentation*

This file (|theovim.txt|) contains the complete list of all Theovim features.

See also:
- |help-writing|: Guide on Vim help syntax
- |:helptags|: Generating help tags files


 vim:tw=78:ts=8:ft=help:norl:
